import {calcModuloCycle_u,calcModuloCycle_s} from "../CycleCountPerModulo";
import {getCycleInfoForJmon} from "../CycleCountPerJmon";
import {Range} from "../Structs";

// Generated by CycleCountPerSection.lua

export const MON1ID_CC_SUCCESS = function(param:{randForMon:bigint, monCount:bigint}){
  const totalFromLog = 797;

  const mods_fromLog = calcModuloCycle_s(38102, 100);
  const mods_diff = calcModuloCycle_s(param.randForMon, param.monCount) - mods_fromLog;

  const cc = totalFromLog + mods_diff;
  return new Range(cc, cc);
};

export const MON1ID_CC_RETRY = function(param:{randForMon:bigint, monCount:bigint}){
  //if jmon id > 849 in lvl50
  const totalFromLog = 570;

  const mods_fromLog = calcModuloCycle_s(6468, 78);
  const mods_diff = calcModuloCycle_s(param.randForMon, param.monCount) - mods_fromLog;

  const diff = totalFromLog + mods_diff;
  return new Range(diff, diff);
};

export const signedToUnsigned = function(n:number){
  return BigInt(new Uint32Array(new Int32Array([n]).buffer)[0]);
}

export enum MonIdRetryReason {
  tooHighMonId,
  sameSpeciesAs1,
  sameSpeciesAs2,
  sameItemAs1, //assuming all mons have item
  sameItemAs2,
}

export const MON2ID_CC_SUCCESS = function(param:{randForMon:bigint, monCount:bigint, mon1Pid:bigint}){
  const totalFromLog = 27617;

  const mods_fromLog = calcModuloCycle_s(61135, 100);
  const mods_diff = calcModuloCycle_s(param.randForMon, param.monCount) - mods_fromLog;

  const modu_fromLog = calcModuloCycle_u(-1125555656, 24);
  const modu_diff = calcModuloCycle_u(param.mon1Pid, 24) - modu_fromLog;

  const diff = totalFromLog + mods_diff + 24 * modu_diff;
  return new Range(diff, diff);
};

export const MON2ID_CC_RETRY = function(param:{randForMon:bigint, monCount:bigint, mon1Pid:bigint,retryReason:MonIdRetryReason}){
  if (param.retryReason === MonIdRetryReason.tooHighMonId)
    return MON1ID_CC_RETRY(param);

  if (param.retryReason === MonIdRetryReason.sameSpeciesAs1){
    const totalFromLog = 8830;

    const mods_fromLog = calcModuloCycle_s(10062, 78);
    const mods_diff = calcModuloCycle_s(param.randForMon, param.monCount) - mods_fromLog;

    const mods_fromLog2 = calcModuloCycle_u(311340744, 24);
    const mods_diff2 = calcModuloCycle_u(param.mon1Pid, 24) - mods_fromLog2;

    const diff = totalFromLog + mods_diff + 8 * mods_diff2;
    return new Range(diff, diff);
  }
  if (param.retryReason === MonIdRetryReason.sameItemAs1){
    //ex: jmon 402 and 403
    const totalFromLog = 27960;

    const mods_fromLog = calcModuloCycle_s(44583, 78);
    const mods_diff = calcModuloCycle_s(param.randForMon, param.monCount) - mods_fromLog;

    const mods_fromLog2 = calcModuloCycle_u(-1408766693, 24);
    const mods_diff2 = calcModuloCycle_u(param.mon1Pid, 24) - mods_fromLog2;

    const diff = totalFromLog + mods_diff + 24 * mods_diff2;
    return new Range(diff, diff);
  }
  throw new Error('invalid reason for MON2ID_CC_SUCCESS: ' + param.retryReason);
};



export const MON3ID_CC_SUCCESS = function(param:{randForMon:bigint, monCount:bigint, mon1Pid:bigint, mon2Pid:bigint}){
  const totalFromLog = 54688;

  const mods_fromLog = calcModuloCycle_s(21561, 100);
  const mods_diff = calcModuloCycle_s(param.randForMon, param.monCount) - mods_fromLog;

  const modu_fromLog1 = calcModuloCycle_u(-1125555656, 24);
  const modu_diff1 = calcModuloCycle_u(param.mon1Pid, 24) - modu_fromLog1;

  const modu_fromLog2 = calcModuloCycle_u(-1781696746, 24);
  const modu_diff2 = calcModuloCycle_u(param.mon2Pid, 24) - modu_fromLog2;

  const cc = totalFromLog + mods_diff + 24 * modu_diff1 + 24 * modu_diff2;
  return new Range(cc, cc);
};

export const MON3ID_CC_RETRY = function(param:{randForMon:bigint, monCount:bigint, mon1Pid:bigint, mon2Pid:bigint, retryReason:MonIdRetryReason}){
  if (param.retryReason === MonIdRetryReason.tooHighMonId)
    return MON1ID_CC_RETRY(param);

  if (param.retryReason === MonIdRetryReason.sameSpeciesAs1)
    return MON1ID_CC_RETRY(param);


  if (param.retryReason === MonIdRetryReason.sameSpeciesAs2){
    const totalFromLog = 18809;

    const mods_fromLog = calcModuloCycle_s(59762, 78);
    const mods_diff = calcModuloCycle_s(param.randForMon, param.monCount) - mods_fromLog;

    const mods_fromLog2 = calcModuloCycle_u(594180853, 24);
    const mods_diff2 = calcModuloCycle_u(param.mon1Pid, 24) - mods_fromLog2;

    const mods_fromLog3 = calcModuloCycle_u(250751103, 24);
    const mods_diff3 = calcModuloCycle_u(param.mon2Pid, 24) - mods_fromLog3;

    const diff = totalFromLog + mods_diff + 8 * mods_diff2 + 8 * mods_diff3;
    return new Range(diff, diff);
  }

  if (param.retryReason === MonIdRetryReason.sameItemAs1){
    //ex: jmon 402 and 403
    const totalFromLog = 35582;

    const mods_fromLog = calcModuloCycle_s(58545, 78);
    const mods_diff = calcModuloCycle_s(param.randForMon, param.monCount) - mods_fromLog;

    const mods_fromLog2 = calcModuloCycle_u(-617891543, 24);
    const mods_diff2 = calcModuloCycle_u(param.mon1Pid, 24) - mods_fromLog2;

    const mods_fromLog3 = calcModuloCycle_u(674892528, 24);
    const mods_diff3 = calcModuloCycle_u(param.mon2Pid, 24) - mods_fromLog3;

    const diff = totalFromLog + mods_diff + 24 * mods_diff2 + 8 * mods_diff3;
    return new Range(diff, diff);
  }

  if (param.retryReason === MonIdRetryReason.sameItemAs2){
    //ex: jmon 402 and 403
    const totalFromLog = 54182;

    const mods_fromLog = calcModuloCycle_s(19598, 78);
    const mods_diff = calcModuloCycle_s(param.randForMon, param.monCount) - mods_fromLog;

    const mods_fromLog2 = calcModuloCycle_u(-1308022143, 24);
    const mods_diff2 = calcModuloCycle_u(param.mon1Pid, 24) - mods_fromLog2;

    const mods_fromLog3 = calcModuloCycle_u(-1357835118, 24);
    const mods_diff3 = calcModuloCycle_u(param.mon2Pid, 24) - mods_fromLog3;

    const diff = totalFromLog + mods_diff + 24 * mods_diff2 + 24 * mods_diff3;
    return new Range(diff, diff);
  }
  throw new Error('invalid reason for MON2ID_CC_SUCCESS: ' + param.retryReason);
};

export const MONXNAT_CC_SUCCESS = function(param:{pid:bigint,jmonId:number,isLvl50:boolean}){
  const info = getCycleInfoForJmon(param.jmonId, param.isLvl50);

  const [min,max] = info.minMaxBaseCycle.map(bc => {
    return bc + calcModuloCycle_u(param.pid, 25) + info.modulo * calcModuloCycle_u(param.pid, 24);
  });
  return new Range(min, max);
};

/** MON1NAT, MON2NAT and MON3NAT share the same retry */
export const MONXNAT_CC_RETRY = function(param:{pid:bigint}){
  //base is 220
  const totalFromLog = 1017;

  const mods_fromLog = calcModuloCycle_u(-1166642948, 25);
  const mods_diff = calcModuloCycle_u(param.pid, 25) - mods_fromLog;

  const cc = totalFromLog + mods_diff;
  return new Range(cc,cc);
};
